openapi: '3.0.2'
info:
  title: Book Store Services
  version: '1.0'
  description:  This is a book store services for the CS4015/CS6705 Software Architure
servers:
  - url: https://api.bookstore.server/v1
    description: The book store api server.
tags:
- name: book
  description: Everything about your book
paths:
  /book:
    put:
      tags:
      - book
      summary: Update an exisitng book
      operationId: updateBook
      requestBody:
        description: Book object that needs to be added to the store.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Book'
        required: true
      responses:
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Book not found
          content: {}
        405:
          description: Validation exception
          content: {}
      security:
      - bookstore_auth:
        - write:books
        - read:books
      x-codegen-request-body-name: body
    post:
      tags:
      - book
      summary: Add a new book to the store
      operationId: addBook
      requestBody:
        description: Book object that needs to be added to the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Book'
        required: true
      responses:
        405:
          description: Invalid input
          content: {}
      security:
      - bookstore_auth:
        - write:books
        - read:books
      x-codegen-request-body-name: body
  /book/{bookId}:
    get:
      tags:
      - book
      summary: Find a book by ID
      description: Returns a single book
      operationId: getBookById
      parameters:
      - name: bookId
        in: path
        description: ID of book to return
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Book'
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Book not found
          content: {}
      security:
      - api_key: []
    post:
      tags:
      - book
      summary: Updates a book in the store with form data
      operationId: updateBookWithId
      parameters:
      - name: bookId
        in: path
        description: ID of book that needs to be updated
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              properties:
                name:
                  type: string
                  description: Updated name of the book
                status:
                  type: string
                  description: Updated status of the book
      responses:
        405:
          description: Invalid input
          content: {}
      security:
      - bookstore_auth:
        - write:books
        - read:books
    delete:
      tags:
      - book
      summary: Deletes a book
      operationId: deleteBook
      parameters:
      - name: api_key
        in: header
        schema:
          type: string
      - name: bookId
        in: path
        description: Book id to delete
        required: true
        schema:
          type: integer
          format: int64
      responses:
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Book not found
          content: {}
      security:
      - bookstore_auth:
        - write:books
        - read:books
  /book/{bookId}/uploadImage:
    post:
      tags:
      - book
      summary: uploads an image
      operationId: uploadFile
      parameters:
      - name: bookId
        in: path
        description: ID of book to update
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          multipart/form-data:
            schema:
              properties:
                additionalMetadata:
                  type: string
                  description: Additional data to pass to server
                file:
                  type: string
                  description: file to upload
                  format: binary
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
      security:
      - bookstore_auth:
        - write:books
        - read:books
  /book/findByStatus:
    get:
      tags:
      - book
      summary: Finds Books by status
      description: Multiple status values can be provided with comma separated strings
      operationId: findBooksByStatus
      parameters:
      - name: status
        in: query
        description: Status values that need to be considered for filter
        required: true
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
            default: available
            enum:
            - available
            - pending
            - sold
      responses:
        200:
          description: successful operation
          content:
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
        400:
          description: Invalid status value
          content: {}
      security:
      - bookstore_auth:
        - write:books
        - read:books


components:
  schemas:
    Book:
      required:
      - title
      - authors
      - photoUrls
      type: object
      properties:
        id:
          type: integer
          format: int64
        title:
          type: string
          example: Drive into DESIGN 
        authors:
          type: array
          items:
            type: string
          xml:
            name: author
            wrapped: true
        description:
          type: string
          example: An ebook on design patterns and the principles behind them
        price:
          type: number
          format: double 
        category:
          $ref: '#/components/schemas/Category'
        photoUrls:
          type: array
          xml:
            name: photoUrl
            wrapped: true
          items:
            type: string
        status:
          type: string
          description: book status in the store
          enum:
          - available
          - pending
          - sold
      xml:
        name: book
    Category:
        type: object
        properties:
          id:
            type: integer
            format: int64
          name:
            type: string
        xml:
          name: Category
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string